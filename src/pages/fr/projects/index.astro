---
import { type CollectionEntry, getCollection, render } from "astro:content";

// layout
import BaseLayout from "@layouts/BaseLayout.astro";

// components
import ProjectCard from "@/components/projects/ProjectCard.astro";
import FilterButton from "@components/button/FilterButton.astro";
import ContactSectionSimple from "@components/contact/ContactSectionSimple.astro";

// utils
import { filterCollectionByLanguage } from "@js/localeUtils";
import { getLocaleFromUrl } from "@js/localeUtils";

const currLocale = getLocaleFromUrl(Astro.url);

const projects = await getCollection("projects", ({ data }) => {
	// filter out draft projects
	return data.draft !== true;
});
const filteredProjects = filterCollectionByLanguage(projects, currLocale);
const sortedProjects = filteredProjects.sort(
	(a, b) => (a.data.order ?? Infinity) - (b.data.order ?? Infinity),
);

// Get unique technologies from all projects
const allTechnologies = [
	...new Set(projects.flatMap((project) => project.data.technologies)),
].sort();
---

<BaseLayout
	title="My projects"
	description="Learn from my projects about web development, design, and more."
>
	<div class="site-container mt-24 pb-24 md:mt-36">
		<!-- Header -->
		<div class="mx-auto mb-16 max-w-7xl">
			<div class="text-center">
				<h1 class="h2 mb-4">Projects</h1>
				<p class="description opacity-80 lg:text-xl">
					Explore my projects and learn about my development journey
				</p>
			</div>
		</div>

		<!-- Technology Filters -->
		<div class="mx-auto mb-12 max-w-5xl">
			<div class="bg-base-100 dark:bg-base-900 rounded-2xl p-6">
				<h2 class="mb-4 text-lg font-bold">Filter by Technology</h2>
				<div class="flex flex-wrap gap-2">
					<FilterButton text="All" class="tech-filter" data-tech="all" aria-pressed="true" />
					{
						allTechnologies.map((tech) => (
							<FilterButton text={tech} class="tech-filter" data-tech={tech} aria-pressed="false" />
						))
					}
				</div>
			</div>
		</div>

		<!-- Projects grid -->
		<div class="projects-wrapper mt-8 mb-auto w-full animate-[height]">
			<div class="projects-grid grid gap-8 md:grid-cols-2 lg:grid-cols-3">
				{
					sortedProjects.map((project) => (
						<div
							class="project-item grid opacity-0"
							data-technologies={JSON.stringify(project.data.technologies)}
						>
							<ProjectCard project={project} />
						</div>
					))
				}
			</div>
		</div>
	</div>

	<ContactSectionSimple />
</BaseLayout>

<script>
	import anime from "animejs";

	const setupProjectsFiltering = () => {
		// Get all filter buttons and project items
		const filterButtons = document.querySelectorAll(".tech-filter");
		const projectItems = document.querySelectorAll(".project-item") as NodeListOf<HTMLElement>;
		const projectsGrid = document.querySelector(".projects-grid") as HTMLDivElement;
		const projectsWrapper = document.querySelector(".projects-wrapper") as HTMLDivElement;

		// Initial animation
		anime({
			targets: ".project-item",
			opacity: [0, 1],
			translateY: [20, 0],
			duration: 800,
			delay: anime.stagger(50),
			easing: "easeOutExpo",
		});

		// Add click event listeners to filter buttons
		filterButtons.forEach((button) => {
			button.addEventListener("click", () => {
				const selectedTech = button.getAttribute("data-tech");

				if (button.getAttribute("aria-pressed") === "true") {
					return;
				}

				// Update button states
				filterButtons.forEach((btn) => {
					btn.setAttribute("aria-pressed", "false");
				});
				button.setAttribute("aria-pressed", "true");

				// Get initial height
				const initialHeight = projectsWrapper.offsetHeight;

				// Set initial height explicitly to enable animation
				projectsWrapper.style.height = `${initialHeight}px`;

				// First fade out all items
				anime({
					targets: ".project-item",
					opacity: 0,
					translateY: 20,
					duration: 400,
					easing: "easeOutQuad",
					complete: function () {
						// Update visibility after fade out
						projectItems.forEach((item) => {
							const technologies = JSON.parse(item.getAttribute("data-technologies") || "[]");
							if (selectedTech === "all" || technologies.includes(selectedTech)) {
								item.classList.remove("hidden");
							} else {
								item.classList.add("hidden");
							}
						});

						// Calculate new height based on grid layout
						const visibleItems = Array.from(projectItems).filter(
							(item) => !item.classList.contains("hidden"),
						);

						// Get dimensions of a single item (they're all the same size)
						const sampleItem = visibleItems[0];
						const itemHeight = sampleItem ? sampleItem.offsetHeight : 0;
						const gridGap = 32; // 8 in Tailwind's gap-8 equals 32px

						// Get the number of columns based on current viewport
						const computedStyle = window.getComputedStyle(projectsGrid);
						const columns = computedStyle.gridTemplateColumns.split(" ").length;

						// Calculate number of rows needed
						const rows = Math.ceil(visibleItems.length / columns);

						// Calculate total height including gaps
						const newHeight = rows * itemHeight + (rows - 1) * gridGap;

						// Set height back to auto after all animations complete
						const timeline = anime.timeline({
							easing: "easeOutExpo",
						});

						// Animate container height and fade in items
						timeline
							.add({
								targets: ".projects-wrapper",
								height: [initialHeight, newHeight],
								duration: 600,
							})
							.add(
								{
									targets: ".project-item:not(.hidden)",
									opacity: [0, 1],
									translateY: [20, 0],
									duration: 600,
									delay: anime.stagger(50),
								},
								"-=400", // Start before height animation ends
							);
					},
				});
			});
		});
	};

	// runs on initial page load
	setupProjectsFiltering();

	// runs on view transitions navigation
	document.addEventListener("astro:after-swap", setupProjectsFiltering);
</script>
