---
/**
 * * pricing sections with toggle for monthly or yearly payments
 * This is designed for 2 pricing items, but can be modified to support more
 */
import { getRelativeLocaleUrl } from "astro:i18n";
import { Icon } from "astro-icon/components";

// components
import Button from "@components/button/Button.astro";
import Switch from "@components/starwind/switch";

// utils
import { getLocaleFromUrl } from "@js/localeUtils";

// get the current page locale to use in links to other pages
const currLocale = getLocaleFromUrl(Astro.url);

interface PricingFeature {
	text: string;
	included: boolean;
}

interface PricingPlan {
	name: string;
	monthlyPrice: number;
	yearlyPrice: number;
	description: string;
	isPopular?: boolean;
	features: PricingFeature[];
}

const plans: PricingPlan[] = [
	{
		name: "Basic",
		monthlyPrice: 40,
		yearlyPrice: 400,
		description: "Perfect for Small Projects and Individuals",
		features: [
			{ text: "Website Development +$3000", included: true },
			{ text: "Hosting and Maintenance", included: true },
			{ text: "Custom Domain", included: true },
			{ text: "Support", included: true },
			{ text: "Basic Analytics", included: true },
			{ text: "Website Changes Included", included: false },
		],
	},
	{
		name: "Professional",
		monthlyPrice: 300,
		yearlyPrice: 3000,
		description: "Ideal for Startups and Small Businesses",
		isPopular: true,
		features: [
			{ text: "Website Design and Development", included: true },
			{ text: "Unlimited Changes", included: true },
			{ text: "One Request at a Time", included: true },
			{ text: "Hosting and Maintenance Included", included: true },
			{ text: "Support, Analytics, and Updates", included: true },
			{ text: "Custom Domain", included: true },
		],
	},
];
---

<section
	id="pricing-two-cards"
	class="bg-background text-foreground dark relative overflow-clip py-16 md:py-32 dark:border-y"
>
	<!-- Background Pattern -->
	<div class="absolute inset-0" aria-hidden="true">
		<svg class="absolute h-full w-full opacity-5" xmlns="http://www.w3.org/2000/svg">
			<defs>
				<pattern id="pricing-two-cards-grid" width="40" height="40" patternUnits="userSpaceOnUse">
					<path d="M 40 0 L 0 0 0 40" fill="none" stroke="currentColor" stroke-width="1"></path>
				</pattern>
			</defs>
			<rect width="100%" height="100%" fill="url(#pricing-two-cards-grid)"></rect>
		</svg>
	</div>

	<div class="site-container relative">
		<div class="mx-auto mb-16 max-w-3xl text-center">
			<h2 class="h2 mb-4">Simple, Transparent Pricing</h2>
			<p class="description text-xl">Choose the perfect plan for your needs</p>
		</div>

		<div class="mb-16 flex items-center justify-center gap-4">
			<span class="description">Monthly</span>
			<Switch variant="primary" id="pricing-two-cards__toggle" size="lg" />
			<span class="description">Yearly <span class="text-primary text-sm">(Save 20%)</span></span>
		</div>

		<div class="mx-auto grid max-w-4xl gap-8 lg:grid-cols-2">
			{
				plans.map((plan) => (
					<div
						class:list={[
							"relative rounded-2xl p-8 backdrop-blur-sm transition-all duration-300",
							"hover:border-primary/30 border",
							plan.isPopular ? ["border-primary/30 bg-white/10"] : ["border-border bg-white/5"],
						]}
					>
						{plan.isPopular && (
							<div class="bg-primary absolute -top-4 left-1/2 -translate-x-1/2 rounded-full px-4 py-1 text-sm font-medium text-white">
								Most Popular
							</div>
						)}

						<div class="mb-8 text-center">
							<h3 class="font-heading mb-2 text-2xl">{plan.name}</h3>
							<p class="description text-sm">{plan.description}</p>
						</div>

						<div class="mb-8 text-center">
							<div class="relative">
								<p class="pricing-monthly text-primary text-5xl font-bold md:text-6xl">
									${plan.monthlyPrice}
									<span class="text-base-500 text-2xl font-normal">/mo</span>
								</p>
								<p class="pricing-yearly text-primary hidden text-5xl font-bold md:text-6xl">
									${plan.yearlyPrice}
									<span class="text-base-500 text-2xl font-normal">/yr</span>
								</p>
							</div>
						</div>

						<ul class="mb-8 space-y-4">
							{plan.features.map((feature) => (
								<li class="description flex items-center">
									<span
										class:list={[
											"mr-2 text-lg",
											feature.included ? "text-primary" : "text-base-600",
										]}
									>
										<Icon name={feature.included ? "tabler/check" : "tabler/x"} class="h-5 w-5" />
									</span>
									<span class:list={[feature.included ? "" : "opacity-70"]}>{feature.text}</span>
								</li>
							))}
						</ul>

						<Button
							href="#contact"
							variant={plan.isPopular ? "primary" : "secondary"}
							class="w-full"
						>
							Get Started
						</Button>
					</div>
				))
			}
		</div>
	</div>
</section>

<script>
	const setupPricingToggle = () => {
		const pricingSection = document.getElementById("pricing-two-cards");
		const toggle = pricingSection?.querySelector("#pricing-two-cards__toggle");
		const monthlyPrices = pricingSection?.querySelectorAll(".pricing-monthly");
		const yearlyPrices = pricingSection?.querySelectorAll(".pricing-yearly");

		if (!toggle || !monthlyPrices || !yearlyPrices) return;

		// Create a new MutationObserver to watch for aria-checked changes
		const observer = new MutationObserver((mutations) => {
			mutations.forEach((mutation) => {
				if (mutation.type === "attributes" && mutation.attributeName === "aria-checked") {
					const isYearly = toggle.getAttribute("aria-checked") === "true";
					monthlyPrices.forEach((price) => price.classList.toggle("hidden", isYearly));
					yearlyPrices.forEach((price) => price.classList.toggle("hidden", !isYearly));
				}
			});
		});

		// Start observing the toggle button for attribute changes
		observer.observe(toggle, {
			attributes: true,
			attributeFilter: ["aria-checked"], // only watch for aria-checked changes
		});
	};

	setupPricingToggle();

	document.addEventListener("astro:after-swap", () => {
		setupPricingToggle();
	});
</script>
