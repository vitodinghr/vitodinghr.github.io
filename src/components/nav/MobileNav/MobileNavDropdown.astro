---
import { Icon } from "astro-icon/components";

// components
import NavLink from "@components/nav/NavLink.astro";

// utils
import { slugify } from "@js/textUtils";

// data
import { type navMegaDropdownColumn, type navDropdownItem } from "@config/types/configDataTypes";

interface Props {
	navItem: navDropdownItem | navMegaDropdownColumn;
}

const { navItem } = Astro.props as Props;

let dropdownItem: navDropdownItem;

if ("dropdown" in navItem) {
	// it is a normal dropdown item
	dropdownItem = navItem;
} else {
	// it is a mega menu dropdown column, so mock a dropdown item
	dropdownItem = {
		text: navItem.title,
		dropdown: navItem.items,
	};
}
---

<li class="mobile-nav__dropdown group relative w-full">
	<button
		class="nav__link--base primary-focus mobile-nav__dropdown-button w-full gap-1 px-4 py-1 lg:hidden lg:px-4"
		type="button"
		id={`${slugify(dropdownItem.text)}-mobile-dropdown-menu`}
		aria-expanded="false"
		aria-haspopup="true"
		aria-controls={`${slugify(dropdownItem.text)}-mobile-dropdown-menu-content`}
	>
		<div class="flex items-center justify-between gap-1">
			{dropdownItem.text}
			<Icon
				name="tabler/chevron-down"
				aria-hidden="true"
				class="mobile-nav__dropdown-chevron size-5 transition-transform"
			/>
		</div>
	</button>

	<div
		id={`${slugify(dropdownItem.text)}-mobile-dropdown-menu-content`}
		aria-labelledby={`${slugify(dropdownItem.text)}-mobile-dropdown-menu`}
		class="mobile-nav__dropdown-content mt-1 hidden max-h-0 w-full min-w-[150px] overflow-hidden transition-all duration-300 ease-in-out"
	>
		<ul class="mb-2 ml-4 transition-[height]">
			{
				dropdownItem.dropdown.map((dropdownItem) => (
					<NavLink navItem={dropdownItem} noIcon={true} />
				))
			}
		</ul>
	</div>
</li>

<script>
	function mobileNavDropdownSetup() {
		const dropdownMenus = document.querySelectorAll(
			".mobile-nav__dropdown",
		) as NodeListOf<HTMLElement>;
		dropdownMenus.forEach((dropdownMenu) => {
			const dropdownButton = dropdownMenu.querySelector(
				".mobile-nav__dropdown-button",
			) as HTMLElement;
			const dropdownChevron = dropdownMenu.querySelector(
				".mobile-nav__dropdown-chevron",
			) as HTMLElement;
			const dropdownContent = dropdownMenu.querySelector(
				".mobile-nav__dropdown-content",
			) as HTMLElement;

			if (dropdownButton && dropdownContent && dropdownChevron) {
				dropdownButton.addEventListener("click", (event) => {
					if (!dropdownMenu.classList.contains("active")) {
						// if dropdown is currently closed, so open it
						dropdownMenu.classList.add("active");
						dropdownButton.setAttribute("aria-expanded", "true");

						// set max-height to the height of the dropdown content
						// this makes it animate properly
						dropdownContent.classList.remove("hidden");
						dropdownContent.style.maxHeight = dropdownContent.scrollHeight + "px";
						dropdownChevron.classList.add("rotate-180");

						// close all other dropdowns
						dropdownMenus.forEach((otherDropdownMenu) => {
							if (otherDropdownMenu !== dropdownMenu) {
								otherDropdownMenu.classList.remove("active");
								otherDropdownMenu
									.querySelector(".mobile-nav__dropdown-button")
									?.setAttribute("aria-expanded", "false");
								otherDropdownMenu
									.querySelector(".mobile-nav__dropdown-content")
									?.setAttribute("style", "max-height: 0px");
								otherDropdownMenu
									.querySelector(".mobile-nav__dropdown-chevron")
									?.classList.remove("rotate-180");
								setTimeout(() => {
									otherDropdownMenu
										.querySelector(".mobile-nav__dropdown-content")
										?.classList.add("hidden");
								}, 300);
							}
						});
					} else {
						// dropdown is currently open, so close it
						dropdownMenu.classList.remove("active");
						dropdownButton.setAttribute("aria-expanded", "false");

						// set max-height to the height of the dropdown content
						// this makes it animate properly
						dropdownContent.style.maxHeight = "0px";
						dropdownChevron.classList.remove("rotate-180");
						// delay to allow close animation
						setTimeout(() => {
							dropdownContent.classList.add("hidden");
						}, 300);
					}
					event.preventDefault();
					return false;
				});
			}
		});
	}

	// runs on initial page load
	mobileNavDropdownSetup();

	// runs on view transitions navigation
	document.addEventListener("astro:after-swap", mobileNavDropdownSetup);
</script>
