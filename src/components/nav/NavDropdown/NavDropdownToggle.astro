---
import { Icon } from "astro-icon/components";

// utils
import { slugify } from "@js/textUtils";

// components
import NavLink from "@components/nav/NavLink.astro";
import { type navDropdownItem } from "@config/types/configDataTypes";

interface Props {
	navItem: navDropdownItem;
}

const { navItem } = Astro.props as Props;
---

<!-- non-mobile dropdown menu -->
<div class="nav__dropdown group relative">
	<button
		class="nav__link--base primary-focus nav__dropdown-button hidden h-10 w-full items-center gap-1 px-4 py-1.5 whitespace-nowrap md:flex"
		type="button"
		id={`${slugify(navItem.text)}-dropdown-menu`}
		aria-expanded="false"
		aria-haspopup="true"
		aria-controls={`${slugify(navItem.text)}-dropdown-menu-content`}
	>
		{navItem.text}
		<Icon
			name="tabler/chevron-down"
			aria-hidden="true"
			class="nav__dropdown-chevron h-5 w-5 shrink-0 transition-transform"
		/>
	</button>
	<div
		id={`${slugify(navItem.text)}-dropdown-menu-content`}
		aria-labelledby={`${slugify(navItem.text)}-dropdown-menu`}
		data-state="closed"
		class:list={[
			"nav__dropdown-content absolute left-0 z-10 transition-all",
			"slide-in-from-top-2 fade-in-0 animate-in hidden will-change-transform",
			"data-[state=closed]:fade-out-0 data-[state=closed]:animate-out",
		]}
	>
		<ul
			class="bg-background dark:bg-base-900 border-border mt-5 w-fit max-w-xs min-w-[150px] rounded-md border border-solid p-2 whitespace-nowrap drop-shadow-md"
		>
			{navItem.dropdown.map((dropdownItem) => <NavLink navItem={dropdownItem} class="w-full" />)}
		</ul>
	</div>
</div>

<script>
	class NavDropdownController {
		private navDropdown: HTMLDivElement;
		private dropdownButton: HTMLButtonElement | null;
		private dropdownChevron: HTMLElement | null;
		private dropdownContent: HTMLDivElement | null;
		private animationDuration: number = 150;

		constructor(navDropdown: HTMLDivElement) {
			this.navDropdown = navDropdown;
			this.dropdownButton = navDropdown.querySelector(".nav__dropdown-button");
			this.dropdownChevron = navDropdown.querySelector(".nav__dropdown-chevron");
			this.dropdownContent = navDropdown.querySelector(".nav__dropdown-content");

			if (!this.dropdownButton || !this.dropdownContent || !this.dropdownChevron) {
				return;
			}

			this.init();
		}

		private init() {
			this.dropdownButton?.addEventListener("click", this.handleDropdownClick.bind(this));
			document.addEventListener("click", this.handleOutsideClick.bind(this));
		}

		private handleDropdownClick(event: MouseEvent) {
			if (!this.navDropdown?.classList.contains("active")) {
				this.openDropdown();
			} else {
				this.closeDropdown();
			}
			event.preventDefault();
			return false;
		}

		private handleOutsideClick(event: MouseEvent) {
			if (
				!this.navDropdown?.contains(event.target as Node) &&
				this.navDropdown?.classList.contains("active")
			) {
				this.closeDropdown();
			}
		}

		private openDropdown() {
			this.navDropdown.classList.add("active");
			this.dropdownContent?.classList.remove("hidden");
			this.dropdownButton?.setAttribute("aria-expanded", "true");
			this.dropdownContent?.setAttribute("data-state", "open");
			this.dropdownChevron?.classList.add("rotate-180");
		}

		private closeDropdown() {
			this.navDropdown.classList.remove("active");
			this.dropdownButton?.setAttribute("aria-expanded", "false");
			this.dropdownContent?.setAttribute("data-state", "closed");
			this.dropdownChevron?.classList.remove("rotate-180");
			setTimeout(() => {
				this.dropdownContent?.classList.add("hidden");
			}, this.animationDuration - 10);
		}
	}

	function navDropdownToggleSetup() {
		const navDropdown = document.querySelectorAll<HTMLDivElement>(".nav__dropdown");
		navDropdown.forEach((navDropdown) => new NavDropdownController(navDropdown));
	}

	// runs on page load
	navDropdownToggleSetup();

	// runs on view transitions navigation
	document.addEventListener("astro:after-swap", navDropdownToggleSetup);
</script>

<!-- <script>
	function dropdownToggleSetup() {
		const dropdownMenus = document.querySelectorAll(".nav__dropdown");
		dropdownMenus.forEach((dropdownMenu) => {
			const dropdownButton = dropdownMenu.querySelector(".nav__dropdown-button");
			const dropdownChevron = dropdownMenu.querySelector(".nav__dropdown-chevron");
			const dropdownContent = dropdownMenu.querySelector(".nav__dropdown-content");
			if (dropdownButton && dropdownContent && dropdownChevron) {
				dropdownButton.addEventListener("click", (event) => {
					if (!dropdownMenu.classList.contains("active")) {
						// if dropdown is currently closed, so open it
						dropdownMenu.classList.add("active");
						dropdownButton.setAttribute("aria-expanded", "true");
						dropdownContent.classList.add("dropdown--fade-in");
						dropdownChevron.classList.add("rotate-180");
					} else {
						// dropdown is currently open, so close it
						dropdownMenu.classList.remove("active");
						dropdownButton.setAttribute("aria-expanded", "false");
						dropdownContent.classList.remove("dropdown--fade-in");
						dropdownChevron.classList.remove("rotate-180");
					}
					event.preventDefault();
					return false;
				});

				// if dropdown menu is open there is a click outside, close the menu
				document.addEventListener("click", (event) => {
					if (
						!dropdownMenu.contains(event.target as Node) &&
						dropdownMenu.classList.contains("active")
					) {
						dropdownMenu.classList.remove("active");
						dropdownButton.setAttribute("aria-expanded", "false");
						dropdownContent.classList.remove("dropdown--fade-in");
						dropdownChevron.classList.remove("rotate-180");
					}
				});
			}
		});
	}

	// runs on initial page load
	dropdownToggleSetup();

	// runs on view transitions navigation
	document.addEventListener("astro:after-swap", dropdownToggleSetup);
</script> -->

<!-- <style>
	@import "tailwindcss/theme" theme(reference);
	@import "@/styles/tailwind-theme.css" theme(reference);

	.dropdown--fade-in {
		@apply animate-dropdown-fade-up visible opacity-100;
	}
</style> -->
